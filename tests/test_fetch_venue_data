import pytest
from unittest.mock import AsyncMock, patch
from fastapi import HTTPException
from app.main import fetch_venue_data
from app.models import VenueStatic, VenueDynamic, DeliverySpecs


@pytest.mark.asyncio
async def test_fetch_venue_data_success():
    with patch("app.venue_service.VenueService") as MockVenueService:
        # Setup mock responses
        mock_service = AsyncMock()
        mock_service.get_venue_static.return_value = VenueStatic(
            location={"coordinates": (24.93087, 60.17094)}
        )
        delivery_specs = DeliverySpecs(
            order_minimum_no_surcharge=1000,
            base_price=200,
            distance_ranges=[
                {"min": 0, "max": 500, "a": 0, "b": 0, "flag": None},
                {"min": 500, "max": 1000, "a": 100, "b": 1, "flag": None},
                {"min": 1000, "max": 0, "a": 0, "b": 0, "flag": None},
            ],
        )
        mock_service.get_venue_dynamic.return_value = VenueDynamic(
            delivery_specs=delivery_specs
        )
        MockVenueService.return_value = mock_service

        # Assert service methods were called correctly
        mock_service.get_venue_static.assert_called_once_with("test-venue")
        mock_service.get_venue_dynamic.assert_called_once_with("test-venue")

        # # Test
        # static_data, dynamic_data = await fetch_venue_data("test-venue")
        # print(f"Returned static data type: {type(static_data)}")
        # print(f"Returned dynamic data type: {type(dynamic_data)}")

        # # Assert
        # assert isinstance(static_data, VenueStatic)
        # assert isinstance(dynamic_data, VenueDynamic)
